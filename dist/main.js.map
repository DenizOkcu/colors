{"version":3,"file":"main.js","sources":["../src/colorFunctions.js","../src/utils.js","../src/main.js"],"sourcesContent":["export function RGBToHSL(r, g, b) {\n  // Make r, g, and b fractions of 1\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  // Find greatest and smallest channel values\n  let cmin = Math.min(r, g, b),\n    cmax = Math.max(r, g, b),\n    delta = cmax - cmin,\n    h = 0,\n    s = 0,\n    l = 0;\n  // Calculate hue\n  // No difference\n  if (delta == 0) h = 0;\n  // Red is max\n  else if (cmax == r) h = ((g - b) / delta) % 6;\n  // Green is max\n  else if (cmax == g) h = (b - r) / delta + 2;\n  // Blue is max\n  else h = (r - g) / delta + 4;\n\n  h = Math.round(h * 60);\n\n  // Make negative hues positive behind 360Â°\n  if (h < 0) h += 360;\n  // Calculate lightness\n  l = (cmax + cmin) / 2;\n\n  // Calculate saturation\n  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n  // Multiply l and s by 100\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n\n  return [h, s, l];\n}\n","import { RGBToHSL } from \"./colorFunctions\";\n\nfunction pixelDataArrayToimageDataData(pixels) {\n  const result = [];\n\n  for (let index = 0; index < pixels.length; index++) {\n    result.push(pixels[index].r);\n    result.push(pixels[index].g);\n    result.push(pixels[index].b);\n    result.push(pixels[index].a);\n  }\n\n  return result;\n}\n\nfunction imageDataDataToPixelDataArray(data) {\n  const pixels = [];\n  let index = 0;\n\n  while (index < data.length) {\n    let rawPixelObject = {\n      r: data[index + 0],\n      g: data[index + 1],\n      b: data[index + 2],\n      a: data[index + 3]\n    };\n\n    let hslArray = RGBToHSL(\n      rawPixelObject.r,\n      rawPixelObject.g,\n      rawPixelObject.b\n    );\n\n    rawPixelObject.h = hslArray[0];\n    rawPixelObject.s = hslArray[1];\n    rawPixelObject.l = hslArray[2];\n\n    pixels.push(rawPixelObject);\n    index = index + 4;\n  }\n\n  return pixels;\n}\n\nexport function draw(image, canvas) {\n  const canvasWidth = 960;\n  const imageWidth = canvasWidth / 2;\n  const imageHeight = image.height / (image.width / imageWidth);\n  const ctx = canvas.getContext(\"2d\");\n\n  const redPixels = [];\n  const greenPixels = [];\n  const bluePixels = [];\n\n  canvas.width = canvasWidth;\n  canvas.height = imageHeight;\n\n  // draw the first/original image\n  ctx.drawImage(image, 0, 0, imageWidth, imageHeight);\n\n  // generate image data from the context\n  let imgData = ctx.getImageData(0, 0, imageWidth, imageHeight);\n\n  // change it\n  let pixels = imageDataDataToPixelDataArray(imgData.data);\n\n  for (let index = 0; index < pixels.length; index++) {\n    let pixel = pixels[index];\n\n    if (pixel.h > 300 || pixel.h <= 60) {\n      redPixels.push(pixel);\n    } else if (pixel.h > 60 && pixel.h <= 180) {\n      greenPixels.push(pixel);\n    } else if (pixel.h > 180 && pixel.h <= 300) {\n      bluePixels.push(pixel);\n    }\n  }\n\n  let newImgData = pixelDataArrayToimageDataData([\n    ...redPixels.sort((a, b) => {\n      if (b.r === a.r) {\n        return b.l - a.l;\n      }\n      return b.r - a.r;\n    }),\n    ...greenPixels.sort((a, b) => {\n      if (b.g === a.g) {\n        return b.l - a.l;\n      }\n      return b.g - a.g;\n    }),\n    ...bluePixels.sort((a, b) => {\n      if (b.b === a.b) {\n        return b.l - a.l;\n      }\n      return b.b - a.b;\n    })\n  ]);\n\n  // set the data\n  imgData.data.set(newImgData);\n\n  // draw the altered image\n  ctx.putImageData(imgData, imageWidth, 0);\n}\n","// imports the main.scss for rollup-plugin-postcss to generate dist/main.css\nimport \"../styles/main.scss\";\n// example import from src/sum.js - delete before you start\nimport { draw } from \"./utils\";\n\nexport default function Lib() {\n  return {\n    draw: draw\n  };\n}\n"],"names":["RGBToHSL","r","g","b","cmin","Math","min","cmax","max","delta","h","l","round","abs","toFixed","draw","image","canvas","imageWidth","canvasWidth","imageHeight","height","width","ctx","getContext","redPixels","greenPixels","bluePixels","drawImage","imgData","getImageData","pixels","data","index","length","rawPixelObject","a","hslArray","s","push","imageDataDataToPixelDataArray","pixel","newImgData","result","pixelDataArrayToimageDataData","sort","set","putImageData"],"mappings":"0wBAAO,SAASA,EAASC,EAAGC,EAAGC,GAE7BF,GAAK,IACLC,GAAK,IACLC,GAAK,QAGDC,EAAOC,KAAKC,IAAIL,EAAGC,EAAGC,GACxBI,EAAOF,KAAKG,IAAIP,EAAGC,EAAGC,GACtBM,EAAQF,EAAOH,EACfM,EAAI,EAEJC,EAAI,SAGUD,EAAH,GAATD,EAAgB,EAEXF,GAAQN,GAASC,EAAIC,GAAKM,EAAS,EAEnCF,GAAQL,GAAQC,EAAIF,GAAKQ,EAAQ,GAEhCR,EAAIC,GAAKO,EAAQ,GAE3BC,EAAIL,KAAKO,MAAU,GAAJF,IAGP,IAAGA,GAAK,KAEhBC,GAAKJ,EAAOH,GAAQ,EASb,CAACM,IAHE,KAHG,GAATD,EAAa,EAAIA,GAAS,EAAIJ,KAAKQ,IAAI,EAAIF,EAAI,MAGpCG,QAAQ,GACvBH,IAAU,IAAJA,GAASG,QAAQ,ICSlB,SAASC,EAAKC,EAAOC,OAEpBC,EAAaC,IACbC,EAAcJ,EAAMK,QAAUL,EAAMM,MAAQJ,GAC5CK,EAAMN,EAAOO,WAAW,MAExBC,EAAY,GACZC,EAAc,GACdC,EAAa,GAEnBV,EAAOK,MATa,IAUpBL,EAAOI,OAASD,EAGhBG,EAAIK,UAAUZ,EAAO,EAAG,EAAGE,EAAYE,WAGnCS,EAAUN,EAAIO,aAAa,EAAG,EAAGZ,EAAYE,GAG7CW,EAjDN,SAAuCC,WAC/BD,EAAS,GACXE,EAAQ,EAELA,EAAQD,EAAKE,QAAQ,KACtBC,EAAiB,CACnBlC,EAAG+B,EAAKC,EAAQ,GAChB/B,EAAG8B,EAAKC,EAAQ,GAChB9B,EAAG6B,EAAKC,EAAQ,GAChBG,EAAGJ,EAAKC,EAAQ,IAGdI,EAAWrC,EACbmC,EAAelC,EACfkC,EAAejC,EACfiC,EAAehC,GAGjBgC,EAAezB,EAAI2B,EAAS,GAC5BF,EAAeG,EAAID,EAAS,GAC5BF,EAAexB,EAAI0B,EAAS,GAE5BN,EAAOQ,KAAKJ,GACZF,GAAgB,SAGXF,EAuBMS,CAA8BX,EAAQG,MAE1CC,EAAQ,EAAGA,EAAQF,EAAOG,OAAQD,IAAS,KAC9CQ,EAAQV,EAAOE,GAEfQ,EAAM/B,EAAI,KAAO+B,EAAM/B,GAAK,GAC9Be,EAAUc,KAAKE,GACNA,EAAM/B,EAAI,IAAM+B,EAAM/B,GAAK,IACpCgB,EAAYa,KAAKE,GACRA,EAAM/B,EAAI,KAAO+B,EAAM/B,GAAK,KACrCiB,EAAWY,KAAKE,OAIhBC,EA5EN,SAAuCX,WAC/BY,EAAS,GAENV,EAAQ,EAAGA,EAAQF,EAAOG,OAAQD,IACzCU,EAAOJ,KAAKR,EAAOE,GAAOhC,GAC1B0C,EAAOJ,KAAKR,EAAOE,GAAO/B,GAC1ByC,EAAOJ,KAAKR,EAAOE,GAAO9B,GAC1BwC,EAAOJ,KAAKR,EAAOE,GAAOG,UAGrBO,EAkEUC,aACZnB,EAAUoB,MAAK,SAACT,EAAGjC,UAChBA,EAAEF,IAAMmC,EAAEnC,EACLE,EAAEQ,EAAIyB,EAAEzB,EAEVR,EAAEF,EAAImC,EAAEnC,QAEdyB,EAAYmB,MAAK,SAACT,EAAGjC,UAClBA,EAAED,IAAMkC,EAAElC,EACLC,EAAEQ,EAAIyB,EAAEzB,EAEVR,EAAED,EAAIkC,EAAElC,QAEdyB,EAAWkB,MAAK,SAACT,EAAGjC,UACjBA,EAAEA,IAAMiC,EAAEjC,EACLA,EAAEQ,EAAIyB,EAAEzB,EAEVR,EAAEA,EAAIiC,EAAEjC,QAKnB0B,EAAQG,KAAKc,IAAIJ,GAGjBnB,EAAIwB,aAAalB,EAASX,EAAY,UClGzB,iBACN,CACLH,KAAMA"}